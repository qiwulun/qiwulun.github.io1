# -*- mode: Org; org-download-image-dir: "../images"; -*-
#+BEGIN_COMMENT
.. title: ssh 反向代理实现内网穿透
.. slug: ssh-fan-xiang-dai-li-shi-xian-nei-wang-chuan-tou
.. date: 2017-01-21 20:12:52 UTC+08:00
.. tags: 
.. category: 
.. link: 
.. description: 
.. type: text
#+END_COMMENT


SSH反向连接及Autossh 

稍懂一点网络的童鞋会明白，Internet上去主动连接一台内网是不可能的，一般的解决方案分两种，一种是端口映射（Port Forwarding），将内网主机的某个端口Open出防火墙，相当于两个外网主机通信；另一种是内网主机主动连接到外网主机，又被称作反向连接（Reverse Connection），这样NAT路由/防火墙就会在内网主机和外网主机之间建立映射，自然可以相互通信了。但是，这种映射是NAT路由自动维持的，不会持续下去，如果连接断开或者网络不稳定都会导致通信失败，这时内网主机需要再次主动连接到外网主机，建立连接。

* 目标 

A要控制B

A主机：外网，ip：123.123.123.123，sshd端口：2221

B主机：内网，sshd端口：2223

无论是外网主机A，还是内网主机B都需要跑ssh daemon

 

** 首先在B上执行

 #+BEGIN_EXAMPLE
 $ ssh -NfR 1234:localhost:2223 user1@123.123.123.123 -p 2221 
 #+END_EXAMPLE

 这句话的意思是将A主机的1234端口和B主机的2223端口绑定，相当于远程端口映射（Remote Port Forwarding）。

 这里每次需要输入A主机user1的登陆密码，后面会讲到解决办法。

 

** 这时在A主机上sshd会listen本地1234端口

 $ ss -ant

#+BEGIN_EXAMPLE
 State      Recv-Q Send-Q        Local Address:Port          Peer Address:Port
 LISTEN     0      128               127.0.0.1:1234                     *:* 
#+END_EXAMPLE

** 像平时一样连接到A主机的1234端口就可以控制内网B主机了

 $ ssh localhost -p1234
 

* 断线重连
一开始提到，这种反向连接（Reverse Connection）不稳定，可能随时断开，需要内网主机B再次向外网A发起连接，这时需要个“朋友”帮你在内网B主机执行这条命令。它就是Autossh。

在此之前还要解决之前的一个问题，那就是每次内网主机B连接外网主机A时都需要输入密码，这个问题ssh本身是提供另外一种验证方式——通过密钥验证用户身份，实现自动登录。

 

**  使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录 
 ssh-keygen  产生公钥与私钥对.

 ssh-copy-id 将本机的公钥复制到远程机器的authorized_keys文件中，ssh-copy-id也能让你有到远程机器的home, ~./ssh , 和 ~/.ssh/authorized_keys的权利

 第一步:在本地机器上使用ssh-keygen产生公钥私钥对

 #+BEGIN_EXAMPLE
 jsmith@local-host$ [Note: You are on local-host here]
 jsmith@local-host$ ssh-keygen
 Generating public/private rsa key pair.
 Enter file in which to save the key (/home/jsmith/.ssh/id_rsa):[Enter key]
 Enter passphrase (empty for no passphrase): [Press enter key]
 Enter same passphrase again: [Pess enter key]
 Your identification has been saved in /home/jsmith/.ssh/id_rsa.
 Your public key has been saved in /home/jsmith/.ssh/id_rsa.pub.
 The key fingerprint is:
 33:b3:fe:af:95:95:18:11:31:d5:de:96:2f:f2:35:f9 jsmith@local-host 
 #+END_EXAMPLE
 第二步:用ssh-copy-id将公钥复制到远程机器中
 #+BEGIN_EXAMPLE
 jsmith@local-host$ ssh-copy-id -i ~/.ssh/id_rsa.pub name@remote-host
 jsmith@remote-host's password:
 Now try logging into the machine, with "ssh 'remote-host'", and check in:
 .ssh/authorized_keys
 to make sure we haven't added extra keys that you weren't expecting. 
 #+END_EXAMPLE
 注意: ssh-copy-id 将key写到远程机器的 ~/ .ssh/authorized_key.文件中
 第三步: 登录到远程机器不用输入密码
 #+BEGIN_EXAMPLE
 jsmith@local-host$ ssh name@remote-host
 Last login: Sun Nov 16 17:22:33 2008 from 192.168.1.2
 [Note: SSH did not ask for password.]
 jsmith@remote-host$ [Note: You are on remote-host here] 
 #+END_EXAMPLE

 常见问题：

 ssh-copy-id -u eucalyptus -i ~eucalyptus/.ssh/id_rsa.pub eucalyptus@remote_host

 上述是给eucalyptus用户赋予无密码登陆的权利

 [1] /usr/bin/ssh-copy-id: ERROR: No identities found

 使用选项 -i ，当没有值传递的时候或者 如果 ~/.ssh/identity.pub 文件不可访问（不存在）, ssh-copy-id 将显示上述的错误信息  （ -i选项会优先使用将ssh-add -L的内容）
 
 #+BEGIN_EXAMPLE
 jsmith@local-host$ ssh-agent $SHELL
 jsmith@local-host$ ssh-add -L
 The agent has no identities.
 jsmith@local-host$ ssh-add
 Identity added: /home/jsmith/.ssh/id_rsa (/home/jsmith/.ssh/id_rsa)
 jsmith@local-host$ ssh-add -L
 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAsJIEILxftj8aSxMa3d8t6JvM79DyBV
 aHrtPhTYpq7kIEMUNzApnyxsHpH1tQ/Ow== /home/jsmith/.ssh/id_rsa
 jsmith@local-host$ ssh-copy-id -i remote-host
 jsmith@remote-host's password:
 Now try logging into the machine, with "ssh 'remote-host'", and check in:
 .ssh/authorized_keys
 to make sure we haven't added extra keys that you weren't expecting.
 [Note: This has added the key displayed by ssh-add -L]
 #+END_EXAMPLE
 [2] ssh-copy-id应注意的三个小地方

 Default public key: ssh-copy-id uses ~/.ssh/identity.pub as the default public key file (i.e when no value is passed to option -i). Instead, I wish it uses id_dsa.pub, or id_rsa.pub, or identity.pub as default keys. i.e If any one of them exist, it should copy that to the remote-host. If two or three of them exist, it should copy identity.pub as default.

 The agent has no identities: When the ssh-agent is running and the ssh-add -L returns “The agent has no identities” (i.e no keys are added to the ssh-agent), the ssh-copy-id will still copy the message “The agent has no identities” to the remote-host’s authorized_keys entry.

 Duplicate entry in authorized_keys: I wish ssh-copy-id validates duplicate entry on the remote-host’s authorized_keys. If you execute ssh-copy-id multiple times on the local-host, it will keep appending the same key on the remote-host’s authorized_keys file without checking for duplicates. Even with duplicate entries everything works as expected. But, I would like to have my authorized_keys file clutter free.
** 2.3.再来看看Autossh的用法

 $ autossh -M 5678 -NR 1234:localhost:2223 user1@123.123.123.123 -p2221
 比之前的命令添加的一个-M 5678参数，负责通过5678端口监视连接状态，连接有问题时就会自动重连，去掉了一个-f参数，因为autossh本身就会在background运行。

 

 3.终极方案：当重启内网B主机，谁来自动Autossh呢，加入daemon吧

 以daemon方式执行，相当于root去执行autossh, ssh，这时刚才普通用户目录下的.ssh/authorized_keys文件会不起效。有两种办法解决，一种是用autossh的参数指定.ssh路径；另外一种是以普通用户身份执行daemon，下面是第二种方式。

 /bin/su -c '/usr/bin/autossh -M 5678 -NR 1234:localhost:2223 user1@123.123.123.123 -p2221' - user1

 autossh还有很多参数，用来设置重连间隔等等。

 将上面命令放入下面各启动方式中，根据自己系统自己配置：

 SysV：/etc/inid.d/autossh

 Upstart: /etc/init/autossh.conf

 systemd: /usr/lib/systemd/system/autossh.service

 

 

 P.S.

 1.家里是ADSL的话，用DDNS，解决ip问题

 2.外网有路由的可设下端口映射

 3.虽然有密钥和密码保护，但还请小心使用



* 外网想要连接
建立 A 机器到 B 机器的反向代理【A 机器上操作】

ssh -fCNR <port_b1>:localhost:22 usr_b@B.B.B.B

<port_b1> 为 B 机器上端口，用来与 A 机器上的22端口绑定。

建立 B 机器上的正向代理，用作本地转发。做这一步是因为绑定后的 端口只支持本地访问【B 机器上操作】

ssh -fCNL "*:<port_b2>:localhost:<port_b1>' localhost

<port_b2> 为本地转发端口，用以和外网通信，并将数据转发到 <port_b1>，实现可以从其他机器访问。

其中的*表示接受来自任意机器的访问。

现在在 C 机器上可以通过 B 机器 ssh 到 A 机器

ssh -p <portb2> usra@B.B.B.B 
