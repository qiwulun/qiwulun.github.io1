#+TITLE: 代码整洁之道──阅读笔记1
#+DATE: 2016-12-23 11:02:47 
#+TAGS: 
#+CATEGORY: 
#+LINK: 
#+DESCRIPTION: 
#+LAYOUT : post
软件质量，不但依赖于架构及项目管理，而且与代码质量紧密相关。这一点，无论是敏捷开发流派还是传统开发流派，都不得不承认。

本书提出一种观念：代码质量与其整洁度成正比。干净的代码，既在质量上较为可靠，也为后期维护、升级奠定了良好基础。作为编程领域的佼佼者，本书作者给出了一系列行之有效的整洁代码操作实践。这些实践在本书中体现为一条条规则（或称“启示”），并辅以来自现实项目的正、反两面的范例。只要遵循这些规则，就能编写出干净的代码，从而有效提升代码质量。

#+BEGIN_QUOTE
归置良好的需求就像代码一样正式，也能作为代码的可执行测试来使用
#+END_QUOTE

#+BEGIN_QUOTE
勒布朗 (leBlanc) 法则:稍后等于不干 (Later equals never)
#+END_QUOTE

#+BEGIN_QUOTE
- 能通过所有测试
- 没有重复代码
- 体现系统中的全部设计理念
- 包括尽量少的实体，比如类、方法、函数等
#+END_QUOTE

#+BEGIN_QUOTE
读与写花费时间比例10:1,写新代码时，我们一直在读旧代码
#+END_QUOTE
* 命名
- 名副其实
  - 不应该用注释来解释变量
  - 避免魔术数
- 避免误导
  - 比如说不要用 List 这种变量
- 做有意义的区分
  - 避免这种玩意，这三个有鬼区别？
    #+BEGIN_EXAMPLE
    getActiveAccount();
    getActiveAccounts();
    getActiveAccountInfo();
    #+END_EXAMPLE
  - 使用读的出来的名字
  - 使用可搜索的名字
  - 类名应该是名词
  - 方法名应该是动词或动词短语
  - 每个概念对应一个词
  - 
