#+BEGIN_COMMENT
.. title: 用 Nikola 在 GitHub 上写博客
.. slug: yong-nikola-zai-github-shang-xie-bo-ke
.. date: 2016-10-21 22:36:11 UTC+08:00
.. tags: mathjax
.. link: 
.. description: 
.. type: text 
#+END_COMMENT

#+TITLE:     用 Nikola 写博客
#+AUTHOR:    赵骥
#+EMAIL:     zhaoji-001@163.com.cn
#+DATE:      2016-10-21
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  zh_CN
#+EXPORT_SELECT_TAGS: export
#+OPTIONS: num:t toc:nil
#+EXPORT_EXCLUDE_TAGS: noexport
#+LATEX_CLASS: ctexart
-----------------

使用 Jekyll, Hexo 等框架在 GitHub Pages 上搭建静态个人博客越来越流行。

而我选用 Nikola 框架的原因是他原生支持 org-mode 文件的解析。此外，它是用 python 写成的，对于我这种不会 Ruby 的人，更为有亲和力。

#+BEGIN_HTML
<!-- TEASER_END --> 
#+END_HTML


* 安装 Nikola
   安装 Nikola 非常简单 =pip install Nikola[extras]=
* 新建一个 GitHub pages
新建一个空的 GitHub Repository, 并 clone 到你的电脑上

#+BEGIN_SRC bash
$ git clone git@github.com:<username>.github.io.git ~/blog 
#+END_SRC

这个库将包含两个分支：master 渲染好的网页， sources 原始文件。所以我们要新建一个分支 sources

#+BEGIN_SRC bash
$ cd ~/blog
$ git checkout -b sources 
#+END_SRC

新建一个 .gitignore 文件
#+BEGIN_EXAMPLE
*.py[cod]
__pycache__
cache
output
.doit.db
_env/
#+END_EXAMPLE

commit 到 source 分支

#+BEGIN_SRC bash
$ git add .gitignore
$ git commit -m "Add .gitignore" 
#+END_SRC
* 建站

#+BEGIN_SRC bash
$ nikola init my_first_site
# Fill the asked information
# 把子文件信息弄到根目录来
$ mv my_first_site/* .
$ rm -r my_first_site 
#+END_SRC

#+BEGIN_SRC bash
$ git add conf.py
$ git commit -m "Add conf.py"
#+END_SRC


所有都设置好了，测试一下效果

#+BEGIN_SRC bash
 $ nikola build
 $ nikola serve 
#+END_SRC

=build= 用于渲染, =serve= 在本地测试。打开 http://localhost:8000 可以看到网页效果，按 C-c 停止

还有一个更为激进的自行探测改变并重新编译网站的命令 =auto=

#+BEGIN_SRC bash
 $ nikola auto 
#+END_SRC

清空之前的页面

#+BEGIN_SRC bash
 $ nikola clean
#+END_SRC

* 安装支持 org-mode 的官方插件
     - https://plugins.getnikola.com/#orgmode
     
     - 安装的命令 =nikola plugin -i orgmode=

     - 把 Configuration 写到conf.py 里
       #+BEGIN_SRC python
         # Add the orgmode compiler to your COMPILERS dict.
         COMPILERS["orgmode"] = ('.org',)

         # Add org files to your POSTS, PAGES
         POSTS = POSTS + (("posts/*.org", "posts", "post.tmpl"),)
         PAGES = PAGES + (("stories/*.org", "stories", "story.tmpl"),)
       #+END_SRC
     - 提交
       #+BEGIN_SRC bash
         $ git add plugins/orgmode conf.py
         $ git commit -m "Add org-mode support"
       #+END_SRC
* 写新文章

#+BEGIN_SRC bash
 $ nikola new_post -e -f orgmode 
#+END_SRC

=-e= 是打开文件进行编辑
=-f= 是指定 format，此处是使用 =orgmode= 格式

当然也可以手动在 posts/ 目录下新建文档, 还可以在里面新建多层目录, 非常灵活. metadata 中比较重要的有:

** metadata
*** tags 中可包含多个标签, 用逗号隔开.
 =draft= 表示该文不会被收入索引, 但它默认会被发布. 禁止发布带有 draft 标签的草稿, 在设置文件 conf.py 中设置 DEPLOY_DRAFTS 为 False. 当然前提是 DEPLOY_COMMANDS 中没包含 nikola build.

 tags 中含有 =private= 的post不会被收入索引, 但会被发布. 通过网址可以直接被访问到.

要显示latex公式, 需要在post的 tags 里加入 mathjax.
*** Post Types:
    text and micro. 前者为普通文章, 后者为微博.
*** nocomments:
    设置为 True 可以禁止本文的评论
*** password:
    可以为文章设置密码, 访问者需要输入密码才可以打开页面.
** Math
要显示latex公式, 需要在post的 tags 里加入 mathjax.

inline math 不再支持 $inline$ 形式, 而使用 \(inline\) (有的情况下需要使用 \\(inline\\)), 如

Euler’s formula: \(e^{ix} = \cos x + i\sin x\)
在reST文件中还可以使用 :math: (推荐):

Euler’s formula: :math:`e^{ix} = \cos x + i\sin x`
display math 使用 \[\], reST中推荐下面这种形式:
#+BEGIN_EXAMPLE
.. math::

   \int \frac{dx}{1+ax}=\frac{1}{a}\ln(1+ax)+C 
#+END_EXAMPLE


$a^2+b^2=c^2$

\[a^2+b^2=c^2\]

* 发布到 GitHub 上
修改 conf.py 文件

#+BEGIN_SRC python
 GITHUB_SOURCE_BRANCH = 'sources'
 GITHUB_DEPLOY_BRANCH = 'master'
#+END_SRC

使用下面的命令发布到 github 上
#+BEGIN_SRC bash
 $ nikola github_deploy 
#+END_SRC


* 配置

有三个配置文件, nikola 的 conf.py 和 orgmode 插件中 conf.el 和 init.el
** 更改模板
 Nikola 提供大量的模板，见这里，

安装的命令
#+BEGIN_SRC bash
 $ nikola install_theme <theme_name> 
#+END_SRC

更改 =conf.py= 来选择模板， 
#+BEGIN_SRC python
 THEME = "<theme_name>" 
#+END_SRC

有些模板要进一步配置，请看他们的网页说明。

Themes can be found here https://themes.getnikola.com/

and installed with nikola install_theme themename. Here bootstrap3 is a very good choice among them, since it supports Bootswatch https://bootswatch.com/ schemes. For example, to use Superhero scheme on this page https://bootswatch.com/superhero/ , just run

#+BEGIN_SRC bash
$ nikola install_theme bootstrap3
$ nikola bootswatch_theme -n custum_theme -s superhero -p bootstrap3 
#+END_SRC

 after installing bootstrap3 theme. To enable this custom scheme, you need set =THEME= to =custom= in conf.py.

 To further tweak your theme, please refer to Theming Nikola.

** 图片显示
    图片插入有一点小问题，输出的路径必须比实际路径更上一层，比如
    =../images/logo.png= 要写成 =../../images/logo.png= ，不然在网页中就找不到了

    为了让图片在 =org= 文件中与网页中都能正常显示，我们要改一个 =conf.py= 的设定，不然错一层文件夹，显示不出来

    'images': 'posts/images'

** 语法高亮
    默认使用 =pygments= ，可以在 =init.el= 或 =conf.el= 中把
=nikola-use-pygments= 改成 =nil= 来取消它。

为了正常显示语法高亮，需要增加相应的 =custom.css= ，并确保 =custom.css= 被 =theme= 使用了

用 pygmentize 生成相应的 css 文件， <PYGMENTS_STYLE> 可以用 =pygmentize -L style= 查看，比如 colorful,friendly

   #+BEGIN_SRC bash
      mkdir -p files/assets/css
      pygmentize -S <PYGMENTS_STYLE> -a .highlight -f html >> files/assets/css/custom.css
   #+END_SRC


** 首页摘要
INDEX_TEASERS 设为 True 可以启用teaser. (默认是False，只在 RSS 中显示摘要） 

这时只需在每个post中加入 =.. TEASER_END= (reST文件) 或 =<!--TEASER_END-->=
 (markdown), 就可以使index page只显示post的第一部 分, 而对于org-mode, 需要
 =#+HTML: <!--TEASER_END-->= 或者

#+BEGIN_SRC org
  ,#+BEGIN_HTML
  <!--TEASER_END-->
  ,#+END_HTML
#+END_SRC
另外,

#+BEGIN_SRC python
INDEX_READ_MORE_LINK = ""
FEED_READ_MORE_LINK = "" 
#+END_SRC
可以禁止掉 “Reader more…”. 个人感觉没有必要, 因为禁掉后读者不能分清楚是否文章在这里真的已经完结还是只是摘要部分.

** 使用 markdown 或 ipython 做源文件
如果页面要使用markdown和ipython notebook, 需要设置 POSTS 与 PAGES 项(下面各增加了后两项, 顺便吐槽在nikola中page居然被叫做story!!!):

POSTS = (
    ("posts/*.rst", "posts", "post.tmpl"),
    ("posts/*.txt", "posts", "post.tmpl"),
    ("posts/*.html", "posts", "post.tmpl"),
    ("posts/*.md", "posts", "post.tmpl"),
    ("posts/*.ipynb", "posts", "post.tmpl"),
)
PAGES = (
    ("stories/*.rst", "stories", "story.tmpl"),
    ("stories/*.txt", "stories", "story.tmpl"),
    ("stories/*.html", "stories", "story.tmpl"),
    ("stories/*.md", "stories", "story.tmpl"),
    ("stories/*.ipynb", "stories", "story.tmpl"),
)

** 把元数据与文章分离开
 一开始的元数据，如更新时间等都是在 org 文件中的，可以把它们分离到单独的文件中。修改 =conf.py= 文件

#+BEGIN_SRC python
 ONE_FILE_POSTS = False 
#+END_SRC

** 显示目录，小标题编号

在 init.el 文件中修改
#+BEGIN_SRC emacs-lisp
;;; Add any custom configuration that you would like to 'conf.el'.
(setq
 nikola-use-pygments t
 org-export-with-toc t
 org-export-with-section-numbers nil
 org-startup-folded 'showeverything) 
#+END_SRC


也可以用 org 文件头来控制
#+BEGIN_SRC org
  ,#+OPTIONS: num:t 
#+END_SRC
** 站点信息
在 conf.py 中
#+BEGIN_SRC python
BLOG_AUTHOR = "Your Name"
BLOG_TITLE = "Demo Site"
BLOG_URL = "http://nikola.ralsina.com.ar"
BLOG_EMAIL = "joe@demo.site"
BLOG_DESCRIPTION = "This is a demo site for Nikola."
#+END_SRC

** 通用文章信息
我们可以将一些信息(比如作者)放在 conf.py 中, 这样所有post都不用再指定作者信息了:

ADDITIONAL_METADATA = {
    'author': 'defnil'
}

** webassets 加速
USE_BUNDLES 设为 True 可以启用webassets (前提是你已经安装了它), 这样可以获得速度上的提升.

** 禁止评论功能:

在 conf.py 中
#+BEGIN_SRC python
COMMENT_SYSTEM = "" 
#+END_SRC
也可以选择启用其它的评论支持, 如disqus, facebook等.

** RSS
在 conf.py 中 GENERATE_RSS 设为 True 默认支持RSS, 如果设为 False, 则会关闭任何与RSS相关的功能. 同时还需要在 NAVIGATION_LINKS 把和RSS相关的页面去掉

** SourceLinks
在 conf.py 中 去掉Source links, 页面上将不会显示页面源代码的链接

#+BEGIN_SRC python
SHOW_SOURCELINK = False
COPY_SOURCES = False
#+END_SRC
** Use Custom Domain
比如, 我们现在已经购买了域名 abc.me, 希望能与刚才创建的Github页面关联. 假设我们用的是上述方法一来管理和发布页面的. 则先在本地的 files/ 目录下添加 CNAME 文件, 其内容很简单, 只有 abc.me. 可以用下面的命令实现:

cd C:/home/mynikolasite
echo "abc.me" > files/CNAME
**  Author Page
 如果你每篇post的作者署名不一致, nikola会判断有多个作者, 因此会自动产生一个Author Page. 当点击每个post上的Author名时, 会转向这名作者的页面. 因此需要按此 说明 https://getnikola.com/blog/author-pages-in-nikola-v770.html 进一步设置. 即: 将 AUTHOR_PAGES_ARE_INDEXES 设为 False, 然后设置每个作者的描述:

#+BEGIN_SRC python
 ENABLE_AUTHOR_PAGES = True
 AUTHOR_PAGES_ARE_INDEXES = False
 AUTHOR_PATH = "authors"
 AUTHOR_PAGES_DESCRIPTIONS = {
     DEFAULT_LANG: {
         "defnil": "Old posts",
         "YONG": "^_^"
     },
 }
 HIDDEN_AUTHORS = ['Guest']

#+END_SRC
 bootstrap3 主题已将这些页面包含在内, 因此作上述设置后就可以直接看到结果了. 如果你要完全禁止这个功能, 也很简单, 将 ENABLE_AUTHOR_PAGES 设为 False 即可.

** Footer
 这里主要是在页面下显示 “Contents 2016 authorname - Powered by Nikola” 字样. 可以在 CONTENT_FOOTER 中做修改.

** Navigation Pane
 可以在 NAVIGATION_LINKS 里添加要链接的页面即可. 比如新建了一个名为 about.rst 的page (会被存放在 stories/ 目录下), 如果要将它放在导航栏里:

 NAVIGATION_LINKS = {
     DEFAULT_LANG: (
         ("/archive.html", "Archive"),
         ("/categories/", "Tags"),
         ("/stories/about/index.html", "About"), # need to be changed to /output/index.html after you set your own homepage
         #("/rss.xml", "RSS feed"),
     ),
 }
 根据 Nikola Handbook https://getnikola.com/handbook.html 的说法, 导航栏至多支持一级子菜单 “Only one level of submenus is supported”, 可以参照说明设置带子菜单样式的导航栏.

** 评论功能 DISQUS
 COMMENT_SYSTEM = "disqus"
 COMMENT_SYSTEM_ID = "yongch" # your disqus ID

** Image Size
 MAX_IMAGE_SIZE 可以决定图片大小, 设置一个合理的数字可以保证所有页面中的图片不至于太大. 还有其它关于image的选项可以酌情选择.

 另外所有放在 images/ 下面的图片都会被复制到 output/ 里并且会为每张图片自动生成thumbnail图片. 因此如果不想产生Thumbnail, 就直接把图片放在 files/images/ 目录下.

** Set Your Own Homepage
 让网页更像site而不是blog, 这里 https://getnikola.com/creating-a-site-not-a-blog-with-nikola.html 有如何建一个site的步骤. 对于已经按blog建立的站点, 我们可以进行下面的改造.

#+BEGIN_SRC python
 INDEX_PATH = "posts"
 PAGES = (
     ("stories/*.rst", "", "story.tmpl"), # Must use "" to put generated pages directly under the root directory
     ("stories/*.md", "", "story.tmpl"),
     ("stories/*.org", "", "story.tmpl"),
     ("stories/*.txt", "", "story.tmpl"),
     ("stories/*.html", "", "story.tmpl"),
     ("stories/*.ipynb", "", "story.tmpl"),
 )
#+END_SRC

 然后我们可以使用 nikola new_page -t Home 创建一个名为 “Home” 的页面. (slug 改为index). 现在我们还需要根据 output/ 下目录的变化重新调整导航栏, 并且把posts放到 “Blog” 导航栏里.

#+BEGIN_SRC python
 NAVIGATION_LINKS = {
     DEFAULT_LANG: (
         ("/posts/", "Blog"),
                     ("/categories/", "Tags"),
         ("/archive.html", "Archive"),
         ("/about/index.html", "About"),
                     ("/rss.xml", "RSS feed"),
     ),
 }
#+END_SRC

 这时可以编辑你自己的 home.rst 了. 也可以直接用我们之前做的 about.rst 链接过来做主页: .. include:: stories/about.rst. 如果你正在使用基于 bootstrap3 的主题, 因为它基于 Bootstrap, 因此任何 Bootstrap 支持的格式都可以用 .rst 来表达. 可以参考 这里 https://getnikola.com/creating-a-site-not-a-blog-with-nikola.html 的一个例子来写主页. 更多语法上的参考还可以看 这里 https://github.com/rougier/bootstrap-rst .
* 其它输入格式

** reST中插入多种格式
*** media

#+BEGIN_EXAMPLE
 .. media:: http://vimeo.com/72425090
 .. media:: http://www.youtube.com/watch?v=wyRpAat5oz0
#+END_EXAMPLE
*** YouTube, Vimeo, Soundcloud

#+BEGIN_EXAMPLE
 .. youtube:: 8N_tupPBtWQ

 .. vimeo:: 20241459

 .. vimeo:: 20241459
    :height: 240
    :width: 320

 [soundcloud url="http://api.soundcloud.com/tracks/78131362"

 .. soundcloud:: 78131362
#+END_EXAMPLE
*** Code

#+BEGIN_EXAMPLE
 .. code-block:: python
    :number-lines:

    print("Our virtues and our failings are inseparable")
#+END_EXAMPLE
*** Listing

 将 foo.py 文件放在 LISTINGS_FOLDERS 指定的目录下.

#+BEGIN_EXAMPLE

 .. listing:: foo.py python
#+END_EXAMPLE
*** Gist

#+BEGIN_SRC 
 .. gist:: 2395294
#+END_SRC
*** Thumbnails

 To include an image placed in the images folder (or other folders defined in IMAGEFOLDERS), use the thumbnail directive, like this:
#+BEGIN_EXAMPLE
 .. thumbnail:: ../tesla.jpg

    Nikola Tesla, the man that invented the 20th century.
#+END_EXAMPLE
*** Slideshows

#+BEGIN_EXAMPLE
 .. slides::

    /galleries/demo/tesla_conducts_lg.jpg
    /galleries/demo/tesla_lightning2_lg.jpg
    /galleries/demo/tesla4_lg.jpg
    /galleries/demo/tesla_lightning1_lg.jpg
    /galleries/demo/tesla_tower1_lg.jpg

#+END_EXAMPLE
*** Chart

 可以参考 这里 http://www.pygal.org/en/latest/

#+BEGIN_EXAMPLE
 .. chart:: Bar
    :title: 'Browser usage evolution (in %)'
    :x_labels: ["2002", "2003", "2004", "2005", "2006", "2007"]
    'Firefox', [None, None, 0, 16.6, 25, 31]
    'Chrome',  [None, None, None, None, None, None]
    'IE',      [85.8, 84.6, 84.7, 74.5, 66, 58.6]
    'Others',  [14.2, 15.4, 15.3, 8.9, 9, 10.4]
#+END_EXAMPLE
*** Doc

 用于跳转到其它页面.

#+BEGIN_EXAMPLE
 Take a look at :doc:`my other post <creating-a-theme>` about theme creating.
 Take a look at :doc:`creating-a-theme` to know how to do it.
#+END_EXAMPLE
** Markdown
*** Set as Default Format
 如果要将markdown或者其它格式设置为默认格式, 只需将其放在 POSTS 和 PAGES 第一个位置, 这样以后在执行 nikola new_post 时不用加参数, 会默认生成 .md 文件:

#+BEGIN_SRC python
 POSTS = (
     ("posts/*.md", "posts", "post.tmpl"),
     ("posts/*.rst", "posts", "post.tmpl"),
     ("posts/*.txt", "posts", "post.tmpl"),
     ("posts/*.html", "posts", "post.tmpl"),
     ("posts/*.ipynb", "posts", "post.tmpl"),
 )
 PAGES = (
     ("stories/*.md", "stories", "story.tmpl"),
     ("stories/*.rst", "stories", "story.tmpl"),
     ("stories/*.txt", "stories", "story.tmpl"),
     ("stories/*.html", "stories", "story.tmpl"),
     ("stories/*.ipynb", "stories", "story.tmpl"),
 ) 
#+END_SRC
*** Extensions
 nikola默认使用的python-markdown遵循standard markdown 标准, 如果要使用Github Favored Markdown (GFM), 可以利用python-markdown中的一些 extensions 来尽量模拟GFM格式:

 nl2br: newline to linebreak
 fenced-code: fenced code blocks
 smart-strong: do not boldify multiple underscores in words
 codehilite: syntax highlighting (using Pygments)
 footnotes: Footnots in markdown

 可以设置 conf.py 文件中的 MARKDOWN_EXTENSIONS 变量来使用这些extensions, 如:
#+BEGIN_SRC python
 MARKDOWN_EXTENSIONS = ["nl2br", "fenced_code", "footnotes",
 "smart_strong","codehilite(linenums=True)", 'extra'] 
#+END_SRC



* 图库

在 gallery 下面新建文件夹就可以了，还可以用文件名来做图片的注释

在 Navigation Bar 中手动加上一个链接

* 总结
Nikola特性有:

- 支持LaTeX数学公式(via MathJax)
- 原生支持多种文档类型, 包括:
  - reStructuredText (.rst, .txt, 此为默认格式, 故 .txt 文件也是以reStructuredText格式来读取的)
  - markdown (.md)
  - Jupyter/IPython Notebook (.ipynb)
  - HTML (.html)
  - PHP (.php)
  - Pandoc支持的格式, 如Textile, LaTeX, Emacs Org-Mode, MS Word等 (Pandoc需要手动开启支持, 默认关闭因可能会与已有格式冲突)
- 能过插件支持更多类型文档, 例如 Emacs Org-Mode, reST with HTML 5 output 等
- 其它特点,
  - 比如提供image gallery 模板
  - image slideshow 模板,
  - 个性化的输出路径定制等.



* 参考资料

https://streakycobra.github.io/posts/blogging-in-org-mode-with-nikola/

HandBook : https://getnikola.com/handbook.html

http://yongchen.org/posts/build-github-pages-with-nikola/
