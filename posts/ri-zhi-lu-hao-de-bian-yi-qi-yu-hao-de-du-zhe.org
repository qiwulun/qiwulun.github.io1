# -*- mode: Org; org-download-image-dir: "../images"; -*-
#+BEGIN_COMMENT
.. title: 日知录－－好的编译器与好的读者
.. slug: ri-zhi-lu-hao-de-bian-yi-qi-yu-hao-de-du-zhe
.. date: 2016-12-04 16:51:59 UTC+08:00
.. tags: 
.. category: 
.. link: 
.. description: 
.. type: text
#+END_COMMENT


每个写过 C 语言的人，恐怕都至少有过过一次漏写分号导致编译不通过的经历──特别是 C 和 python 混着来的人。

有些人被编译器 f*ck 多了，就会产生思考 https://www.zhihu.com/question/20298345/answer/14670020
#+BEGIN_QUOTE 
实际上，不少人（包括我）认为，c-style的分号本来就是多余的。 为什么这么说？因为明确的EOS只是给编译器的提示而已。

*如果漏了分号，编译器会报错。*

*既然它都报错了，显然它知道这里应该有EOS 。*

*既然它知道，那么干嘛还要我写？* 
#+END_QUOTE

当年，C的爹们是遵循着 worse is better ，非常强调实现简单──一个明确的分号来标志语句结束，对于编译器来说绝对是简单的。

本来可以没有的分号，这个冗余信息，让解读变的简单了起来。

但是打起来太累，于是人生苦短，我用python。
----------------------------------------------------------

compiling 是让编译器懂你在说什么， reading 是让读者懂你在说什么。二者有很多相似点。

所以很多人会觉得，10万+微信平台文总是，标题党+几个案例+两句鸡汤，翻来覆去那几句，有什么意思？──但是它好懂。 

如果想要省掉冗余信息，就要编译器（或者读者）根据上下文去理解，引申与填充。

----------------------------------------------------------
这要求太高了。

我们举个简单的例子──《金刚经》。


