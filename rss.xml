<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>赵骥's Site</title><link>https://qiwulun.github.io/</link><description>This is Zhao Ji's blog site.</description><atom:link type="application/rss+xml" rel="self" href="https://qiwulun.github.io/rss.xml"></atom:link><language>zh_cn</language><lastBuildDate>Wed, 07 Dec 2016 10:01:22 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>git 在每次 Push 时不用重复输入密码</title><link>https://qiwulun.github.io/posts/git-zai-mei-ci-push-shi-bu-yong-zhong-fu-shu-ru-mi-ma.html</link><dc:creator>Zhao JI</dc:creator><description>&lt;ol class="org-ol"&gt;
&lt;li&gt;使用 SSH 方式进行推送，您需要配置 SSH 公钥后进行操作，详情请阅读 SSH 公钥配置文档
&lt;/li&gt;

&lt;li&gt;对于 Https 协议: 首先在全局配置保存你的密码， ~/.git-credentials （没有就创建）
内添加 &lt;a href="https://%7Busername%7D:%7Bpasswd%7D@git.coding.net"&gt;https://{username}:{passwd}@git.coding.net&lt;/a&gt; 然后执行配置 Git 命令存储认
证命令： $git config –global credential.helper store
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
执行后在 ~/.gitconfig 文件会多出下面配置项: credential.helper = store
&lt;/p&gt;

&lt;p&gt;
详情请参考&lt;a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%87%AD%E8%AF%81%E5%AD%98%E5%82%A8#_credential_caching"&gt;凭证存储&lt;/a&gt; 。
&lt;/p&gt;

&lt;pre class="example"&gt;
git 通过 ssh 和 https 向服务器提交的速度有没有区别？

现在是用的ssh向阿里云服务器提交，感觉有1秒的延迟，如果换成https，能不能做到接近0延迟的提交？

moliliang   2014-06-01 01:26:39 +08:00

https 快一些，其实没啥太大差别。ssh主要是不用属于密码。当然https也可以免输入密码，只是比ssh设置麻烦。

ferock   2014-06-01 01:50:06 +08:00

ssh key 安全会更好一点

很多https 密码都在url 里，太明文了

ssh key 慢，其他差不多
&lt;/pre&gt;</description><category>git ssh</category><guid>https://qiwulun.github.io/posts/git-zai-mei-ci-push-shi-bu-yong-zhong-fu-shu-ru-mi-ma.html</guid><pubDate>Tue, 06 Dec 2016 12:32:10 GMT</pubDate></item><item><title>用 ssh 来进行 git 免密码传输</title><link>https://qiwulun.github.io/posts/yong-ssh-lai-jin-xing-git-mian-mi-ma-chuan-shu.html</link><dc:creator>Zhao JI</dc:creator><description>&lt;p&gt;
SSH keys
&lt;/p&gt;

&lt;p&gt;
SSH key 可以让你在你的电脑和Code服务器之间建立安全的加密连接。 先执行以下语句来判断是否已经存在本地公钥：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat ~/.ssh/id_rsa.pub
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
如果你看到一长串以 ssh-rsa或 ssh-dsa开头的字符串, 你可以跳过 ssh-keygen的步骤。
提示: 最好的情况是一个密码对应一个ssh key，但是那不是必须的。你完全可以跳过创建密码这个步骤。请记住设置的密码并不能被修改或获取。
你可以按如下命令来生成ssh key：
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen -t rsa -C "someone@email.com"
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
这个指令会要求你提供一个位置和文件名去存放键值对和密码，你可以点击Enter键去使用默认值。
用以下命令获取你生成的公钥：
cat ~/.ssh/id&lt;sub&gt;rsa&lt;/sub&gt;.pub
复制这个公钥放到你的个人设置中的SSH/My SSH Keys下，请完整拷贝从ssh-开始直到你的用户名和主机名为止的内容。
&lt;/p&gt;</description><category>git</category><category>ssh</category><guid>https://qiwulun.github.io/posts/yong-ssh-lai-jin-xing-git-mian-mi-ma-chuan-shu.html</guid><pubDate>Tue, 06 Dec 2016 12:23:26 GMT</pubDate></item><item><title>用 sox 改变 wav 文件的音量</title><link>https://qiwulun.github.io/posts/yong-sox-gai-bian-wav-wen-jian-de-yin-liang.html</link><dc:creator>Zhao JI</dc:creator><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sox -v .3 input.wav output.wav
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;-v&lt;/code&gt; 表示改变音量 &lt;code&gt;.3&lt;/code&gt; 表示变为原始音量的0.3倍
&lt;/p&gt;</description><guid>https://qiwulun.github.io/posts/yong-sox-gai-bian-wav-wen-jian-de-yin-liang.html</guid><pubDate>Tue, 06 Dec 2016 05:30:03 GMT</pubDate></item><item><title>欲得官，杀人放火受招安。</title><link>https://qiwulun.github.io/posts/yu-de-guan-sha-ren-fang-huo-shou-zhao-an.html</link><dc:creator>Zhao JI</dc:creator><description>&lt;p&gt;
欲得官，杀人放火受招安。
&lt;/p&gt;</description><guid>https://qiwulun.github.io/posts/yu-de-guan-sha-ren-fang-huo-shou-zhao-an.html</guid><pubDate>Mon, 05 Dec 2016 14:27:01 GMT</pubDate></item><item><title>为什么要写作</title><link>https://qiwulun.github.io/posts/wei-shi-yao-yao-xie-zuo.html</link><dc:creator>Zhao JI</dc:creator><description>&lt;p&gt;
生命如此短暂，为什么总要将青春浪费在不断的选择之中呢？罚你，回头阅读心理学家施瓦茨（Barry Schwartz）的TED演讲：选择之困惑——为何多即是少，1百遍啊1百遍。请记住施瓦茨的演讲要点：
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;更多的选择不代表更多的自由；
&lt;/li&gt;

&lt;li&gt;更多的选择导致决策的延迟和降低的满意感；
&lt;/li&gt;

&lt;li&gt;快乐之秘诀，在于降低自己的期望值。
&lt;/li&gt;
&lt;/ul&gt;</description><guid>https://qiwulun.github.io/posts/wei-shi-yao-yao-xie-zuo.html</guid><pubDate>Mon, 05 Dec 2016 14:17:04 GMT</pubDate></item><item><title>emacs 使用 ssh</title><link>https://qiwulun.github.io/posts/emacs-shi-yong-ssh.html</link><dc:creator>Zhao JI</dc:creator><description>&lt;p&gt;
参考这一篇
&lt;a href="http://lifegoo.pluskid.org/wiki/EmacsTRAMP.html"&gt;http://lifegoo.pluskid.org/wiki/EmacsTRAMP.html&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
C-x C-f /ssh: [username]@[host-ip]#[port]:path/to/file
&lt;/p&gt;

&lt;p&gt;
远程复制文件
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scp ./cudnn-8.0-linux-x64-v5.1.tgz username@hostip:/path/to/file
&lt;/pre&gt;&lt;/div&gt;</description><guid>https://qiwulun.github.io/posts/emacs-shi-yong-ssh.html</guid><pubDate>Mon, 05 Dec 2016 06:38:02 GMT</pubDate></item><item><title>在 docker 中增加 ssh 服务</title><link>https://qiwulun.github.io/posts/zai-docker-zhong-zeng-jia-ssh-fu-wu.html</link><dc:creator>Zhao JI</dc:creator><description>&lt;p&gt;
参考 &lt;a href="http://www.linuxdiyf.com/linux/15472.html"&gt;http://www.linuxdiyf.com/linux/15472.html&lt;/a&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 1 先在宿主机上运行一个已有的镜像 
docker run -it ubuntu bash
# 如果已经有其它的基础镜像也可以代替上面的ubuntu

# 2 在container上运行下列命令
# 2.1 安装ssh服务
apt-get update #更新源
apt-get install ssh

# 2.2 配置密码
# 使用 passwd 来配置 ssh 登录时需要的密码
passwd
# 按提示进行修改

# 2.3 修改sshd_config配置文件
vi /etc/ssh/sshd_config
# 将PermitRootLogin 改为 yes，将UsePAM 改为 no。

# 2.4 退出 container
exit

# 3. [可选] 在宿主机上把此镜像保存一下：
# 3.1 把容器保存成镜像
docker commit [container-id] [image-id]
# 3.2 把刚刚的容器干掉：
docker stop [container-id] #停用
docker rm [container-id]   #删除

# 4 在宿主机上启动container 并挂载端口：
docker run --name [container-name] -i -t -p 50001:22 [image-id]
# 把 ssh 默认端口22 挂载到宿主机的 50001 端口上

# 5 在container上启动ssh服务：
/etc/init.d/ssh start
# C-p C-q 组合键退出会话，不关闭container

# 6 在其他电脑上使用ssh登录即可
ssh [rootname]@[hostip] -p 50001
# 输入 rootpasscode
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
想要以后台方式启动的话，要写一个自启动 ssh 的脚本
&lt;code&gt;docker run -d -p 22:22 -t centos6.5:sshd /root/run.sh&lt;/code&gt;
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 其它的设置&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Docker网络管理及容器跨主机通信（四）
&lt;a href="http://lizhenliang.blog.51cto.com/7876557/1731898"&gt;http://lizhenliang.blog.51cto.com/7876557/1731898&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
docker高级应用之赋予容器独立外网ip
&lt;a href="http://dl528888.blog.51cto.com/2382721/1604167"&gt;http://dl528888.blog.51cto.com/2382721/1604167&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>docker</category><category>ssh</category><guid>https://qiwulun.github.io/posts/zai-docker-zhong-zeng-jia-ssh-fu-wu.html</guid><pubDate>Mon, 05 Dec 2016 06:00:31 GMT</pubDate></item><item><title>日知录－－好的编译器与好的读者</title><link>https://qiwulun.github.io/posts/ri-zhi-lu-hao-de-bian-yi-qi-yu-hao-de-du-zhe.html</link><dc:creator>Zhao JI</dc:creator><description>&lt;p&gt;
每个写过 C 语言的人，恐怕都至少有过一次漏写分号导致编译不通过的经历──特别是 C 和 python 混着来的人。
&lt;/p&gt;

&lt;p&gt;
有些人被编译器 f*ck 多了，就会产生思考 &lt;a href="https://www.zhihu.com/question/20298345/answer/14670020"&gt;https://www.zhihu.com/question/20298345/answer/14670020&lt;/a&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
实际上，不少人（包括我）认为，c-style的分号本来就是多余的。 为什么这么说？因为明确的EOS只是给编译器的提示而已。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;如果漏了分号，编译器会报错。&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;既然它都报错了，显然它知道这里应该有EOS 。&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;既然它知道，那么干嘛还要我写？&lt;/b&gt; 
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
当年，C的爹们是遵循着 worse is better ，非常强调实现简单──一个明确的分号来标志语句结束，对于编译器来说绝对是简单的。
&lt;/p&gt;

&lt;p&gt;
本来可以没有的分号，作为冗余信息，让解读变的简单了起来。
&lt;/p&gt;

&lt;p&gt;
但是打起来太累，于是人生苦短，我用python。
&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;
compiling 是让编译器懂你在说什么， reading 是让读者懂你在说什么。二者有很多相似点。
&lt;/p&gt;

&lt;p&gt;
所以很多人会觉得，10万+微信平台文总是，标题党+几个案例+两句鸡汤，翻来覆去那几句，有什么意思？──但是它好懂。 
&lt;/p&gt;

&lt;p&gt;
如果想要省掉冗余信息，就要编译器（或者读者）根据上下文去理解，引申与填充。
&lt;/p&gt;

&lt;hr&gt;
&lt;p&gt;
做个主动的读者，你眼前的世界是完全不一样的。
&lt;/p&gt;

&lt;p&gt;
我们举个简单的例子──《金刚经》。
&lt;/p&gt;

&lt;p&gt;
把《金刚经》当成《论语》一样的名言集锦来读是很惬意的。比如
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
一切有为法，如梦幻泡影，如雾亦如电，应做如是观。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
──多典型的佛教，“赤条条来去无牵挂”，“白茫茫大地真干净”的大彻大悟感。
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
若以色见我，以音声求我，是人行邪道，不能见如来。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
──“学我者生，似我者死”的佛教版
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
诸菩萨摩诃萨应如是生清净心，不应住色生心，不应住声香味触法生心， &lt;b&gt;应无所住而生其心。&lt;/b&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
──像不像《逍遥游》“若夫乘天地之正，而御六气之辩，以游无穷者，彼且恶乎待哉？”
&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;
但如果不满足于单句，试图贯通全文，那就有困惑在──
&lt;/p&gt;

&lt;p&gt;
你看，我们前面引的几句其实都是在讲一件事──“不住于相”。也就是在《金刚经》中反
复出现的“无我相，无人相，无众生相，无寿者相”
&lt;/p&gt;

&lt;p&gt;
这是符合佛教精神的──佛传四法印也说“诸法无我”。
&lt;/p&gt;

&lt;p&gt;
但它带来的问题是，既然无我，那么是什么东西在“轮回”？
&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;
最集中出现这个矛盾的，是下面这句经文──
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
如我昔为歌利王割截身体，我于尔时，无我相、无人相、无众生相、无寿者相。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
《金刚经》中，如来讲“我昔为歌利王割截身体”，“又念过去于五百世作忍辱仙人”，
“我念过去无量阿僧祗劫，于然灯佛前，得值八百四千万亿那由他诸佛”。
&lt;/p&gt;

&lt;p&gt;
──如果无我，如来又怎么判定那些经历是“我”？
&lt;/p&gt;

&lt;hr&gt;
&lt;p&gt;
于是就有了下面这两句经文。
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
如来说有我者，则非有我，而凡夫之人以为有我。 
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
以是义故，如来常说：‘汝等比丘，知我说法，如筏喻者；法尚应舍，何况非法。’”
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
语言歧义性与不精确，是表达佛教等复杂思想的最大障碍。因为语言基于常识，而佛学的假设本就反常识，
  ──比如说“无我”。
  ──没你，谁在和我说话。
  ──这个我不是你说的那个我……唉呀，讲不清楚。
&lt;/p&gt;

&lt;p&gt;
佛陀给了我们一种解决的方法：
&lt;/p&gt;

&lt;p&gt;
“般若”不可说，就给你一套测试题──
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;当你证到般若智慧，你就能理解这些看起来自相矛盾的语言。
&lt;/li&gt;
&lt;li&gt;接下来，就是你自己要怎么去填充，弥合，贯通？ 
&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
&lt;p&gt;
还记得哥德尔不完备定理么？
&lt;/p&gt;

&lt;p&gt;
用 &lt;b&gt;自指&lt;/b&gt; 带来的矛盾揭示了体系的不完备。
&lt;/p&gt;

&lt;p&gt;
──挺好的，在那样的世界总有空白等着我们去填充：）
&lt;/p&gt;

&lt;p&gt;
PS： 上文提到的金刚经的矛盾我解不开。。。谁证道了请来点拨我一下
&lt;/p&gt;</description><guid>https://qiwulun.github.io/posts/ri-zhi-lu-hao-de-bian-yi-qi-yu-hao-de-du-zhe.html</guid><pubDate>Sun, 04 Dec 2016 08:51:59 GMT</pubDate></item><item><title>强化学习 RL</title><link>https://qiwulun.github.io/posts/qiang-hua-xue-xi-rl.html</link><dc:creator>Zhao JI</dc:creator><description>&lt;p&gt;&lt;a href="https://qiwulun.github.io/posts/qiang-hua-xue-xi-rl.html"&gt;更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;</description><guid>https://qiwulun.github.io/posts/qiang-hua-xue-xi-rl.html</guid><pubDate>Wed, 30 Nov 2016 09:17:25 GMT</pubDate></item><item><title>org mode 常用技巧</title><link>https://qiwulun.github.io/posts/org-mode-chang-yong-ji-qiao.html</link><dc:creator>Zhao JI</dc:creator><description>&lt;div&gt;&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiwulun.github.io/posts/org-mode-chang-yong-ji-qiao.html#sec-1"&gt;截图 &lt;code&gt;SPC m i s&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiwulun.github.io/posts/org-mode-chang-yong-ji-qiao.html#sec-2"&gt;粘贴图片 &lt;code&gt;SPC m i y&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiwulun.github.io/posts/org-mode-chang-yong-ji-qiao.html#sec-3"&gt;跳回原点 &lt;code&gt;C－o&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://qiwulun.github.io/posts/org-mode-chang-yong-ji-qiao.html"&gt;更多…&lt;/a&gt; (剩余 1 分钟去阅读)&lt;/p&gt;&lt;/div&gt;</description><guid>https://qiwulun.github.io/posts/org-mode-chang-yong-ji-qiao.html</guid><pubDate>Wed, 30 Nov 2016 08:13:58 GMT</pubDate></item></channel></rss>