# -*- mode: Org; org-download-image-dir: "../../images"; -*-
#+BEGIN_COMMENT
.. title: C/C++
.. slug: C
#+END_COMMENT
* 语法
** header
      #include 如果用“”来包含文件名，则编译器先在当前的工作目录或源代码目录，用<>则先在存储标准头文件的文件夹中找，
** 变量
*** 存储持续性、作用域与链接性：

  1、自动存储持续性：函数或代码块中的变量（包括函数参数），进入时创建，执行完释放，（包括常规局部变量，auto声明的局部变量，使用register声明的局部变量）

  2、静态存储持续性：外部定义或 static，整个程序运行过程中都存在

  3、动态存储持续性：new创建，delete删除
* IDE


- CLion ::
           在Linux上开发的话强烈推荐。在使用开源工具链的场景下，CLion是第一个让我有理由
           考虑代替vim的C/C++ IDE. 智能补全、Refactor、代码导航与分析、代码自动
           生成、与VCS集成等功能个个顺手。实在不是什么editor+plugin所能比拟的。
           这些功能以前要找N多插件还难以完美实现，现在CLion给你一个 *开箱即用*
           的环境。

 
- vim/emacs ::
   用户多，除了性能和远程开发的方便程度以外，很大程度上是因为Linux上的确实没有很
               好用的IDE。下面这些C/C++ IDE能提供的功能并不比vim+YouCompleteMe提
               供的特性多。

  - 编写 ::
        编写代码时还是vim强，可以非常快的书写，局部修改，高亮，替换基本上都是无
          意识完成，这点很重要，对单线程的大脑来说要最大限度降低contextswitch。

        补全感觉基于文本的补全就够了，基于文法的很省心但不觉得是必须的。 编写时
          的feature重在缩短将想法具相化成代码的延迟。

  - 调试 ::
          调试试过一段时间的vim集成，蛋那个疼啊……

          这方面还是ide强，但多数需要简单调试的地方后来基本都考日志解决了，少数
          关键位置的调试还是直接进gdb写脚本方便。

  - 重构 ::
          重构方面是vim或其他以文本编辑为目标的编辑器的共同弱点，加上c的宏的使用，
          没有代码语法解析支持根本就是人肉查找替换来完成…

          个人感觉这是自己唯一需要ide的情况了，也用的不多了，大部分时候倾向于通
          过规范代码来简化重构的复杂性，实在不好替换是拿出ide全局改一遍就关了

- Visual Studio ::
                   是Windows下的当然选择，但是VS的C/C++补全重构功能远远比不上C#
                   的相关功能，而且msvc编译器长期以来支持标准的速度比较慢，使用
                   自有的solution格式也给维护项目增加了很多困惑。

                   如果你满足于使用Windows平台+msvc编译器的话，VS+VA X插件可以
                   提供一个很不错的环境。



- Eclipse CDT ::
   和Eclipse本身的缺点很类似。特性很全，但是相对来说bug比较多，比较迟缓。代码提
                 示和搜索功能和JetBrains的产品差一个数量级。
- Netbeans ::
   性能和debugger也一直有点问题。非常喜欢不断parse代码。不过支持远程开发和debug
              是一个非常好的特性。
- Qt Creator 和 KDeveloper ::
   其实是两个相对不错的选择，但是在智能感知，项目管理、重构、quick fix这些方面始
     终有些差距。


**

** CLion
   http://www.jetbrains.com/clion/ 跨平台，Arch Linux 下就用他

- 一键显示函数调用关系
- 查找变量和函数的引用
- 查找符号
- 查找文件
- git 流程顺畅，review 哪里做了修改很方便
- 非常好的智能感知功能，自动折叠、高亮、自动补全、类型推断都很好。
- Autofix工作的很好。
- 重构很方便，像inline函数、extract成员函数、常数，pull up/pull down、修改签名这些功能都有。
- 调试功能很方便，可以自动解析STL容器。
- 继承了jetbrains系ide的很多优点，像方便的vim插件和keymap调整，滚动条预览，与VCS的紧密集成等等。
- 跨平台，支持CMake/gcc/clang/mingw/cygwin/gdb。虽然不多，但是其实基本上也够用了。
- 简洁，没有额外的抽象层，你直接通过控制CMakeLists/CMakeCache来控制项目的编译。这样无需额外学习一遍IDE项目相关的概念，而且省去了VS+CMake时每改一次CMakeLists就要generate一次solution的麻烦。
- 很快，当然我也没有导入很大很大的项目，不知道结局是什么样。


缺点
- 似乎只支持 CMake
- 一以贯之的吃内存（随便打开个项目吃掉1G很正常）、
- 不支持lldb（1.1版本即将支持）、
- 不支持远程开发调试、
- 不支持makefile/autotools项目、
- 没有测试框架支持。


